{"remainingRequest":"C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\src\\components\\Tablero.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\src\\components\\Tablero.vue","mtime":1568050535530},{"path":"C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\usuario\\Desktop\\fede agosto 2019\\Proyecto Vue.js\\buscaminas-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* Importamos el componente 'Cuadro' */\nimport Cuadro from \"./Cuadro.vue\";\nexport default {\n  components: {\n    Cuadro: Cuadro\n  },\n  data: function data() {\n    return {\n      cuadros: []\n      /** iniciamos cuadro y cargamos con datos*/\n      ,\n      colores: ['', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho'],\n      nivelPrincipiante: {\n        nivel: 1,\n        filas: 9,\n        columnas: 9,\n        minas: 10\n      },\n      nivelIntermedio: {\n        nivel: 2,\n        filas: 16,\n        columnas: 16,\n        minas: 40\n      },\n      nivelExperto: {\n        nivel: 3,\n        filas: 16,\n        columnas: 30,\n        minas: 30\n      },\n      nivelActual: null,\n      minas: [],\n      minasRestantes: 0,\n      segundos: 0,\n      inicio: false,\n      //timer es una variable que podremos pausar una vez perdamos o ganemos\n      timer: null\n    };\n  },\n  computed: {\n    minasRestantesCifras: function minasRestantesCifras() {\n      var cifras = this.minasRestantes.toString();\n\n      if (cifras.length == 1) {\n        cifras = '00' + cifras;\n      } else if (cifras.length == 2) {\n        cifras = '0' + cifras;\n      }\n\n      return cifras;\n    },\n    segundosCifras: function segundosCifras() {\n      var cifras = this.segundos.toString();\n\n      if (cifras.length == 1) {\n        cifras = '00' + cifras;\n      } else if (cifras.length == 2) {\n        cifras = '0' + cifras;\n      }\n\n      return cifras;\n    }\n  },\n\n  /* created se invoca cuando la parte inteligente del componente estÃ¡ lista(Es un estado) */\n  created: function created() {\n    this.nivelActual = this.nivelPrincipiante;\n    this.iniciarNivel();\n  },\n  methods: {\n    detenerTiempo: function detenerTiempo() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    },\n\n    /*seleccionar el nivel*/\n    seleccionarNivel: function seleccionarNivel(nivel) {\n      if (this.nivelActual.nivel == nivel) {\n        return;\n      }\n\n      if (nivel == 1) {\n        this.nivelActual = this.nivelPrincipiante;\n      } else if (nivel == 2) {\n        this.nivelActual = this.nivelIntermedio;\n      } else this.nivelActual = this.nivelExperto;\n\n      this.iniciarNivel();\n    },\n    iniciarNivel: function iniciarNivel() {\n      var _this = this;\n\n      this.detenerTiempo();\n      this.minasRestantes = this.nivelActual.minas;\n      this.segundos = 0;\n      this.inicio = false;\n      var filas = this.nivelActual.filas;\n      var columnas = this.nivelActual.columnas;\n      var totalCuadros = filas * columnas;\n      this.cuadros = [];\n      /* iniciamos cuadros(de nuevo) ,vacio ya que contiene informacion*/\n\n      var indices = [];\n\n      for (var i = 0; i < totalCuadros; i++) {\n        var cuadro = {\n          inicial: true,\n          bandera: false,\n          valor: \"\",\n          fila: Math.floor(i / columnas) + 1,\n\n          /** math.floor corta los decimales y deja los enteros */\n          columna: i % columnas + 1,\n          vecinos: [],\n          claseValor: ''\n          /*  console.log(i,cuadro.fila,cuadro.columna)\r\n          */\n\n        };\n        this.cuadros.push(cuadro);\n        indices.push(i);\n      }\n      /*generamos las minas aleatoriamente* */\n\n\n      for (var _i = 0; _i < this.nivelActual.minas; _i++) {\n        var posicion = Math.floor(Math.random() * (indices.length - 1));\n        var indice = indices[posicion];\n        this.cuadros[indice].valor = \"ðŸ’£\";\n        indices.splice(posicion, 1);\n      }\n\n      for (var _i2 = 0; _i2 < totalCuadros; _i2++) {\n        var _cuadro = this.cuadros[_i2];\n\n        if (_cuadro.columna == 1) {\n          if (_cuadro.fila == 1) {\n            _cuadro.vecinos.push(_i2 + 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas + 1);\n          } else if (_cuadro.fila == filas) {\n            _cuadro.vecinos.push(_i2 + 1);\n\n            _cuadro.vecinos.push(_i2 - columnas);\n\n            _cuadro.vecinos.push(_i2 - columnas + 1);\n          } else {\n            _cuadro.vecinos.push(_i2 + 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas + 1);\n\n            _cuadro.vecinos.push(_i2 - columnas);\n\n            _cuadro.vecinos.push(_i2 - columnas + 1);\n          }\n        } else if (_cuadro.columna == columnas) {\n          if (_cuadro.fila == 1) {\n            _cuadro.vecinos.push(_i2 - 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas - 1);\n          } else if (_cuadro.fila == filas) {\n            _cuadro.vecinos.push(_i2 - 1);\n\n            _cuadro.vecinos.push(_i2 - columnas);\n\n            _cuadro.vecinos.push(_i2 - columnas - 1);\n          } else {\n            _cuadro.vecinos.push(_i2 - 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas - 1);\n\n            _cuadro.vecinos.push(_i2 - columnas);\n\n            _cuadro.vecinos.push(_i2 - columnas - 1);\n          }\n        } else {\n          if (_cuadro.fila == 1) {\n            _cuadro.vecinos.push(_i2 - 1);\n\n            _cuadro.vecinos.push(_i2 + 1);\n\n            _cuadro.vecinos.push(_i2 + columnas - 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas + 1);\n          } else if (_cuadro.fila == filas) {\n            _cuadro.vecinos.push(_i2 - 1);\n\n            _cuadro.vecinos.push(_i2 + 1);\n\n            _cuadro.vecinos.push(_i2 + columnas - 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas + 1);\n          } else {\n            _cuadro.vecinos.push(_i2 - 1);\n\n            _cuadro.vecinos.push(_i2 + 1);\n\n            _cuadro.vecinos.push(_i2 + columnas - 1);\n\n            _cuadro.vecinos.push(_i2 + columnas);\n\n            _cuadro.vecinos.push(_i2 + columnas + 1);\n\n            _cuadro.vecinos.push(_i2 - columnas - 1);\n\n            _cuadro.vecinos.push(_i2 - columnas);\n\n            _cuadro.vecinos.push(_i2 - columnas + 1);\n          }\n        }\n\n        if (_cuadro.valor != \"ðŸ’£\") {\n          var minas = _cuadro.vecinos.filter(function (v) {\n            return _this.cuadros[v].valor == \"ðŸ’£\";\n          }).length;\n          /*Operacion de retorno de un arreglo con todos los vecinos que sean minas(cantidad) */\n\n\n          if (minas > 0) {\n            _cuadro.valor = minas;\n            _cuadro.claseValor = 'numero ' + this.colores[minas];\n          }\n        }\n      }\n    },\n    activarCuadro: function activarCuadro(cuadro) {\n      var _this2 = this;\n\n      if (cuadro.inicial && !cuadro.bandera) {\n        cuadro.inicial = false;\n\n        if (!this.inicio) {\n          this.timer = setInterval(function () {\n            _this2.segundos++;\n          }, 1000);\n          this.inicio = true;\n        }\n\n        if (cuadro.valor == \"ðŸ’£\") {//Explosion\n        } else if (cuadro.valor == '') {\n          cuadro.vecinos.forEach(function (v) {\n            _this2.activarCuadro(_this2.cuadros[v]);\n          });\n        }\n      }\n    },\n    cambiarMinasRestantes: function cambiarMinasRestantes(cantidad) {\n      this.minasRestantes += cantidad;\n    }\n  }\n};",{"version":3,"sources":["Tablero.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"tablero\">  <!-- definimos los elementos dentro de tablero: niveles -->\r\n        <div class=\"niveles\">\r\n        <span>Nivel:\r\n        </span>\r\n        <span @click=\"seleccionarNivel(1)\" class=\"nivel\" :class=\"{'nivel-seleccionado':nivelActual.nivel == 1}\">1</span>\r\n        <span @click=\"seleccionarNivel(2)\" class=\"nivel\" :class=\"{'nivel-seleccionado':nivelActual.nivel == 2}\">2</span>\r\n        <span @click=\"seleccionarNivel(3)\" class=\"nivel\" :class=\"{'nivel-seleccionado':nivelActual.nivel == 3}\">3</span>\r\n        </div>\r\n        <div class=\"panel\"> <!-- elemento panel -->\r\n        <div class=\"marcador minas-restantes\"> {{minasRestantesCifras}}</div>\r\n       \r\n        \r\n        <div class=\"cara\" @click=\"iniciarNivel\">\r\n            <span style='font-size:30px;'>&#x1F920;</span></div>\r\n        <div class=\"marcador segundos\">{{segundosCifras}}</div>\r\n        \r\n       \r\n        </div>\r\n        <div class=\"matriz\"> <!-- elemento matriz -->\r\n            <!-- pintar el objeto cuadro en la matriz --> \r\n            <cuadro @onCambiarMinasRestantes=\"cambiarMinasRestantes\" @onActivar=\"activarCuadro\" :info=\"item\" v-for=\"(item, index) in cuadros\" :key=\"index\" :style=\"'grid-row: ' + item.fila+';grid-column:'+item.columna+';'\" />\r\n     </div>\r\n    </div>\r\n</template>\r\n<script>/* Importamos el componente 'Cuadro' */\r\nimport Cuadro from './Cuadro.vue'\r\n\r\nexport default {\r\n    components: {Cuadro},\r\n    data(){\r\n        return{\r\n            cuadros:[] /** iniciamos cuadro y cargamos con datos*/,\r\n            colores:['','uno','dos','tres','cuatro','cinco','seis','siete','ocho'] ,\r\n            nivelPrincipiante: {\r\n                nivel: 1,\r\n                filas: 9,\r\n                columnas: 9,\r\n                minas: 10\r\n            },\r\n            nivelIntermedio: {\r\n                nivel: 2,\r\n                filas: 16,\r\n                columnas: 16,\r\n                minas: 40\r\n            },\r\n            nivelExperto: {\r\n                nivel: 3,\r\n                filas: 16,\r\n                columnas: 30,\r\n                minas: 30\r\n            },\r\n            nivelActual: null,\r\n            minas:[],\r\n            minasRestantes:0,\r\n            segundos:0,\r\n            inicio:false,\r\n            //timer es una variable que podremos pausar una vez perdamos o ganemos\r\n            timer:null\r\n    } \r\n    },\r\n    computed: {\r\n        minasRestantesCifras(){\r\n            let cifras=this.minasRestantes.toString()\r\n\r\n\r\n            if(cifras.length==1){\r\n                cifras='00' + cifras\r\n            }\r\n            else if(cifras.length==2){\r\n                cifras = '0' + cifras\r\n            }\r\n            return cifras\r\n        },\r\n        segundosCifras(){\r\n            let cifras=this.segundos.toString()\r\n            \r\n            if(cifras.length==1){\r\n                cifras='00' + cifras\r\n            }\r\n            else if(cifras.length==2){\r\n                cifras = '0' + cifras\r\n            }\r\n            return cifras\r\n        }\r\n    },\r\n     /* created se invoca cuando la parte inteligente del componente estÃ¡ lista(Es un estado) */\r\n    created() {\r\n        this.nivelActual = this.nivelPrincipiante\r\n        this.iniciarNivel() \r\n    },\r\n    methods: {\r\n        detenerTiempo(){\r\n            if(this.timer){\r\n                clearInterval(this.timer)\r\n            }\r\n        },\r\n                /*seleccionar el nivel*/\r\n        seleccionarNivel(nivel){\r\n        if (this.nivelActual.nivel ==nivel){return}\r\n        if(nivel==1){this.nivelActual = this.nivelPrincipiante} \r\n        else if(nivel==2){this.nivelActual=this.nivelIntermedio}\r\n        else (this.nivelActual=this.nivelExperto)\r\n        this.iniciarNivel()\r\n        },\r\n        iniciarNivel(){\r\n            this.detenerTiempo()\r\n            this.minasRestantes=this.nivelActual.minas\r\n            this.segundos=0\r\n            this.inicio=false\r\n            let filas = this.nivelActual.filas\r\n            let columnas = this.nivelActual.columnas\r\n            let totalCuadros = filas * columnas\r\n\r\n            this.cuadros = [] /* iniciamos cuadros(de nuevo) ,vacio ya que contiene informacion*/\r\n            let indices = []\r\n            for (let i = 0 ; i < totalCuadros; i++){\r\n                let cuadro = {\r\n                    inicial:true,\r\n                    bandera:false,\r\n                    valor: \"\",\r\n                    fila: Math.floor(i/columnas)+1, /** math.floor corta los decimales y deja los enteros */\r\n                    columna: (i % columnas)+1,\r\n                    vecinos: [],\r\n                    claseValor:''\r\n                }\r\n          /*  console.log(i,cuadro.fila,cuadro.columna)\r\n          */    this.cuadros.push(cuadro)\r\n                indices.push(i)\r\n            }\r\n                /*generamos las minas aleatoriamente* */\r\n            for(let i=0 ;i < this.nivelActual.minas; i++){\r\n                let posicion=Math.floor(Math.random() * (indices.length - 1))\r\n                let indice = indices[posicion]\r\n                this.cuadros[indice].valor = \"ðŸ’£\"\r\n    \r\n                indices.splice(posicion, 1)\r\n            }\r\n\r\n            for(let i=0 ;i <totalCuadros; i++){\r\n                let cuadro = this.cuadros[i]\r\n                if(cuadro.columna==1){\r\n                    if(cuadro.fila==1){\r\n                        cuadro.vecinos.push(i+1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas+1)\r\n\r\n                    }\r\n                    else if(cuadro.fila==filas){\r\n                        cuadro.vecinos.push(i+1)\r\n                        cuadro.vecinos.push(i-columnas)\r\n                        cuadro.vecinos.push (i-columnas+1)\r\n                    }\r\n                    else{\r\n                        cuadro.vecinos.push(i+1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas+1)\r\n                        cuadro.vecinos.push(i-columnas)\r\n                        cuadro.vecinos.push(i-columnas+1)\r\n                    }\r\n                }\r\n                else if(cuadro.columna==columnas){\r\n                    if(cuadro.fila==1){\r\n                        cuadro.vecinos.push(i-1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas-1)\r\n                    }\r\n                    else if(cuadro.fila==filas){\r\n                        cuadro.vecinos.push(i-1)\r\n                        cuadro.vecinos.push(i-columnas)\r\n                        cuadro.vecinos.push(i-columnas-1) \r\n                    }\r\n                    else{\r\n                        cuadro.vecinos.push(i-1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas-1)\r\n                        cuadro.vecinos.push(i-columnas)\r\n                        cuadro.vecinos.push(i-columnas-1)\r\n                    }\r\n                }\r\n                else{\r\n                    if(cuadro.fila==1){\r\n                        cuadro.vecinos.push(i-1)\r\n                        cuadro.vecinos.push(i+1)\r\n                        cuadro.vecinos.push(i+columnas-1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas+1)\r\n                    }\r\n                    else if(cuadro.fila==filas){ \r\n                        cuadro.vecinos.push(i-1)\r\n                        cuadro.vecinos.push(i+1)\r\n                        cuadro.vecinos.push(i+columnas-1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas+1)\r\n                    }else{\r\n                        cuadro.vecinos.push(i-1)\r\n                        cuadro.vecinos.push(i+1)\r\n                        cuadro.vecinos.push(i+columnas-1)\r\n                        cuadro.vecinos.push(i+columnas)\r\n                        cuadro.vecinos.push(i+columnas+1)\r\n                        cuadro.vecinos.push(i-columnas-1)\r\n                        cuadro.vecinos.push(i-columnas)\r\n                        cuadro.vecinos.push(i-columnas+1) \r\n                    }\r\n                }\r\n                if(cuadro.valor !=\"ðŸ’£\"){\r\n                    let minas = cuadro.vecinos.filter(v=>this.cuadros[v].valor==\"ðŸ’£\").length /*Operacion de retorno de un arreglo con todos los vecinos que sean minas(cantidad) */ \r\n                    \r\n                    if(minas>0){\r\n                        cuadro.valor=minas\r\n                        cuadro.claseValor='numero '+this.colores[minas]\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        activarCuadro(cuadro){\r\n            if(cuadro.inicial && !cuadro.bandera){\r\n                cuadro.inicial=false\r\n                if(!this.inicio){\r\n                    this.timer = setInterval(()=>{\r\n                        this.segundos++\r\n                    },1000)\r\n                    this.inicio=true\r\n                }\r\n\r\n                if(cuadro.valor==\"ðŸ’£\"){\r\n                    //Explosion\r\n                }\r\n                else if(cuadro.valor==''){\r\n                    cuadro.vecinos.forEach(v=>{\r\n                       this.activarCuadro(this.cuadros[v]) \r\n                    })\r\n                }\r\n            }\r\n        },\r\n        cambiarMinasRestantes(cantidad){\r\n            this.minasRestantes += cantidad\r\n        }\r\n    }\r\n}\r\n</script>\r\n<!-- Definimos los estilos de cada elemento en la tabla --> \r\n<style>\r\n    @import url('<link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\">');\r\n/*Especifica una familia de fuentes para nuestro html completo*/\r\n    .html{\r\n       font-family: 'Roboto', sans-serif; \r\n    }\r\n    .numero{\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n    }\r\n    .uno{color:teal;}\r\n    .dos{color:thistle;}\r\n    .tres{color:tomato;}\r\n    .cuatro{color:rgb(204, 0, 255);}\r\n    .cinco{color:violet;}\r\n    .seis{color:yellowgreen;}\r\n    .siete{color:brown;}\r\n    .ocho{color:chartreuse;}\r\n\r\n    .tablero{\r\n        display: grid;\r\n        justify-content: center;\r\n        background-color: cornflowerblue;\r\n        padding: 10px;\r\n        user-select: none;\r\n    }\r\n    .niveles{\r\n        display: grid;\r\n        grid-auto-flow: column;\r\n        grid-gap: 10px;\r\n        font-size:24px;\r\n        padding: 5px;\r\n        justify-content: start;\r\n        align-items:center;\r\n\r\n    }\r\n    .nivel{\r\n        width: 32px;\r\n        height: 32px;\r\n        color:gray;\r\n        text-align: center;\r\n        vertical-align: center;\r\n        cursor:pointer;\r\n    }\r\n\r\n    .nivel-seleccionado{\r\n        color:yellowgreen !important;\r\n        background-color: aqua;\r\n        border-style:  solid;\r\n        border-width: 2px;\r\n        border-radius:50%;\r\n        cursor:default;\r\n    }\r\n    .panel{\r\n        display: grid;\r\n        grid-auto-flow: column;\r\n        font-size: 30px;\r\n        margin-top: 10px;\r\n        padding:10px;\r\n        border-top-color: aqua;\r\n        border-left-color: antiquewhite;\r\n        border-bottom-color: aquamarine;\r\n        border-right-color: aliceblue;\r\n        border-style: solid;\r\n        border-width: 2px;\r\n\r\n    }\r\n    .marcador{\r\n         background-color: black;\r\n         color:red;\r\n         height: 40px;\r\n         padding:2px;\r\n        border-top-color: aqua;\r\n        border-left-color:  aquamarine;\r\n        border-bottom-color: rebeccapurple;\r\n        border-right-color: aliceblue;\r\n        border-style: solid;\r\n        border-width: 1px;\r\n    }\r\n    .minas-restantes{\r\n        justify-self: start;\r\n    }\r\n    .cara{\r\n        display: grid;\r\n        justify-content: center;\r\n        align-items: center;\r\n        justify-self: center;\r\n        width: 40px;\r\n        height: 40px;\r\n        font-size:24px;\r\n        border-top-color: aqua;\r\n        border-left-color: antiquewhite;\r\n        border-bottom-color:  aquamarine;\r\n        border-right-color: aliceblue;\r\n        border-style: solid;\r\n        border-width: 2px;\r\n        cursor:pointer;\r\n\r\n\r\n    }\r\n    .segundos{ \r\njustify-self: end;\r\n    }\r\n    .matriz{\r\n        display: grid;\r\n        background-color:darkslategray;\r\n        padding: 2px;\r\n        margin-top: 10px;\r\n        border-top-color: aquamarine;\r\n        border-left-color: aquamarine;\r\n        border-bottom-color: cadetblue;\r\n        border-right-color: cornflowerblue;\r\n        border-style:solid;\r\n        border-width: 3px;\r\n       \r\n    }\r\n</style>"],"sourceRoot":"src/components"}]}